import { isNil } from 'lodash';
import { PropDef } from '@storybook/components';
import { ReactNode } from 'react';
import { ExtractedProp } from '../../lib2/extractDocgenProps';
import { ExtractedJsDocParam } from '../../lib2/jsdocParser';
import { createPropText } from '../../lib2/createComponents';

const MAX_CAPTION_LENGTH = 35;

interface PropTypesType {
  name: string;
  value?: any;
  computed?: boolean;
  raw?: string;
  description?: string;
}

interface EnumValue {
  value: string;
  computed: boolean;
}

interface UnionValue {
  name: string;
  value: string;
  raw?: string;
}

enum InspectionType {
  Object = 'object',
  Array = 'array',
  Function = 'func',
  Element = 'element',
  String = 'string',
}

interface InspectionResult {
  guessedType: InspectionType;
}

interface TypeDef {
  caption: string;
  value: string;
  guessedType?: InspectionType;
}

function inspectTypeValue(value: string): InspectionResult {
  const trimmedValue = value.trimLeft();
  let type = InspectionType.String;

  if (trimmedValue.startsWith('{')) {
    type = InspectionType.Object;
  } else if (trimmedValue.startsWith('[')) {
    type = InspectionType.Array;
  } else if (trimmedValue.startsWith('()') || trimmedValue.startsWith('function')) {
    type = mightBeComponent(trimmedValue) ? InspectionType.Element : InspectionType.Function;
  } else if (trimmedValue.startsWith('class') && mightBeComponent(trimmedValue)) {
    type = InspectionType.Element;
  }

  return {
    guessedType: type,
  };
}

function mightBeComponent(value: string): boolean {
  return value.includes('React') || value.includes('Component') || value.includes('render');
}

function prettifObject(value: string): string {
  const cleanedValue = value.replace(/PropTypes./g, '').replace(/.isRequired/g, '');

  // try {
  //   // Trying to re-build the value to provide a better formatting.
  //   // This is considered safe since this is the code generated by docgen that is evaluated.
  //   // eslint-disable-next-line no-eval
  //   const object = eval(`(${cleanedValue})`);

  //   // TODO: Use import objectToString from 'javascript-stringify'.
  //   return JSON.stringify(object, null, 2);
  // } catch (e) {
  //   // do nothing.
  // }

  return cleanedValue;
}

function generateCustom({ raw }: PropTypesType): TypeDef {
  if (!isNil(raw)) {
    const { guessedType } = inspectTypeValue(raw);

    return createTypeDef({
      caption: 'custom',
      value: guessedType === InspectionType.Object ? prettifObject(raw) : raw,
      guessedType,
    });
  }

  return createTypeDef({ caption: 'custom' });
}

function createTypeDef(def: Partial<TypeDef>): TypeDef {
  const { caption, value, guessedType } = def;

  return {
    caption,
    value: !isNil(value) ? value : caption,
    guessedType,
  };
}

function generateFuncSignature(
  { jsDocTags }: ExtractedProp,
  hasParams: boolean,
  hasReturns: boolean
): string {
  const funcParts = [];

  if (hasParams) {
    const funcParams = jsDocTags.params.map((x: ExtractedJsDocParam) => {
      const prettyName = x.getPrettyName();
      const typeName = x.getTypeName();

      if (!isNil(typeName)) {
        return `${prettyName}: ${typeName}`;
      }

      return prettyName;
    });

    funcParts.push(`(${funcParams.join(', ')})`);
  } else {
    funcParts.push('()');
  }

  if (hasReturns) {
    funcParts.push(`=> ${jsDocTags.returns.getTypeName()}`);
  }

  return funcParts.join(' ');
}

function generateFunc(extractedProp: ExtractedProp): TypeDef {
  const { jsDocTags } = extractedProp;

  if (!isNil(jsDocTags)) {
    const hasParams = !isNil(jsDocTags.params);
    const hasReturns = !isNil(jsDocTags.returns);

    if (hasParams || hasReturns) {
      return createTypeDef({
        caption: 'func',
        value: generateFuncSignature(extractedProp, hasParams, hasReturns),
      });
    }
  }

  return createTypeDef({ caption: 'func' });
}

// TODO: do somekind of eval / stringify to format.
function generateShape(type: PropTypesType, extractedProp: ExtractedProp): TypeDef {
  const fields = Object.keys(type.value)
    .map((key: string) => `${key}: ${generateType(type.value[key], extractedProp).value}`)
    .join(', ');

  return createTypeDef({ caption: 'object', value: `{${fields}}` });
}

function generateObjectOf(type: PropTypesType, extractedProp: ExtractedProp): TypeDef {
  const format = (of: string) => `objectOf(${of})`;

  const { caption, value } = generateType(type.value, extractedProp);
  // const { guessedType } = inspectTypeValue(typeDef.value);

  // if (guessedType === GuessedType)

  return createTypeDef({
    caption: format(caption),
    value: format(value),
  });
}

function generateUnion(type: PropTypesType, extractedProp: ExtractedProp): TypeDef {
  if (Array.isArray(type.value)) {
    const values = type.value.reduce(
      (acc: any, v: UnionValue) => {
        const { caption, value } = generateType(v, extractedProp);

        acc.caption.push(caption);
        acc.value.push(value);

        return acc;
      },
      { caption: [], value: [] }
    );

    return createTypeDef({ caption: values.caption.join(' | '), value: values.value.join(' | ') });
  }

  return createTypeDef({ caption: type.value });
}

function generateEnumValue({ value, computed }: EnumValue): TypeDef {
  return computed ? createTypeDef({ caption: 'object', value }) : createTypeDef({ caption: value });
}

function generateEnum(type: PropTypesType): TypeDef {
  if (Array.isArray(type.value)) {
    const values = type.value.reduce(
      (acc: any, v: EnumValue) => {
        const { caption, value } = generateEnumValue(v);

        acc.caption.push(caption);
        acc.value.push(value);

        return acc;
      },
      { caption: [], value: [] }
    );

    return createTypeDef({ caption: values.caption.join(' | '), value: values.value.join(' | ') });
  }

  return createTypeDef({ caption: type.value });
}

function generateArray(type: PropTypesType, extractedProp: ExtractedProp): TypeDef {
  const braceAfter = (of: string) => `${of}[]`;
  const braceAround = (of: string) => `[${of}]`;

  // eslint-disable-next-line prefer-const
  let { caption, value, guessedType } = generateType(type.value, extractedProp);

  if (caption === 'custom') {
    console.log(caption, value, guessedType);

    if (!isNil(guessedType)) {
      switch (guessedType) {
        case InspectionType.String:
          if (value.length <= MAX_CAPTION_LENGTH) {
            caption = value;
          }
          break;
        case InspectionType.Object:
          caption =
            value.length <= MAX_CAPTION_LENGTH
              ? braceAround(value)
              : braceAfter(guessedType.toString());
          value = braceAround(value);

          return createTypeDef({ caption, value });
        default:
          caption = guessedType.toString();
      }
    }
  }

  return createTypeDef({ caption: braceAfter(value) });

  // if (type.value.name === 'custom') {
  //   let { caption, value } = generateType(type.value, extractedProp);

  //   if (caption === 'custom') {
  //     const { guessedType } = inspectTypeValue(value);

  //     switch (guessedType) {
  //       case GuessedType.String:
  //         if (value.length <= MAX_CAPTION_LENGTH) {
  //           caption = value;
  //         }
  //         break;
  //       case GuessedType.Object:
  //         caption =
  //           value.length <= MAX_CAPTION_LENGTH
  //             ? braceAround(value)
  //             : braceAfter(GuessedType.Object.toString());
  //         value = braceAround(value);

  //         return createTypeDef({ caption, value });
  //       default:
  //         caption = guessedType.toString();
  //     }
  //   }

  //   return createTypeDef({ caption: braceAfter(caption), value: braceAfter(value) });
  // }

  // return createTypeDef({ caption: braceAfter(type.value.name) });
}

// TODO: I think I need to add back the "default", for case like arrayOf(custom).
// The idea is if the raw of the custom is too long, it could fall back on the default for caption and use the full for title.
function generateType(type: PropTypesType, extractedProp: ExtractedProp): TypeDef {
  try {
    switch (type.name) {
      case 'custom':
        return generateCustom(type);
      case 'func':
        return generateFunc(extractedProp);
      case 'shape':
        return generateShape(type, extractedProp);
      case 'instanceOf':
        return createTypeDef({ caption: type.value });
      case 'objectOf':
        return generateObjectOf(type, extractedProp);
      case 'union':
        return generateUnion(type, extractedProp);
      case 'enum':
        return generateEnum(type);
      case 'arrayOf':
        return generateArray(type, extractedProp);
      default:
        return createTypeDef({ caption: type.name });
    }
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error(e);
  }

  return createTypeDef({ caption: 'unknown' });
}

// ////////////////////////////////////////////

// TODO: Cannot do the max length thing for some type becase I dont have a default value.
function renderType(type: PropTypesType, extractedProp: ExtractedProp): ReactNode {
  switch (type.name) {
    case 'custom':
    case 'shape':
    case 'instanceOf':
    case 'objectOf':
    case 'union':
    case 'enum':
    case 'arrayOf': {
      const { caption, value } = generateType(type, extractedProp);

      return createPropText(caption, { title: caption !== value ? value : undefined });
    }
    case 'func': {
      const { value } = generateType(type, extractedProp);

      return createPropText(value);
    }
    default:
      return null;
  }
}

export function enhancePropTypesProp(extractedProp: ExtractedProp): PropDef {
  const { propDef, docgenInfo } = extractedProp;

  const newtype = renderType(docgenInfo.type, extractedProp);

  if (!isNil(newtype)) {
    propDef.type = newtype;
  }

  return propDef;
}
