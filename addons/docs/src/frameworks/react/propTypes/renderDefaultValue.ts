import { ReactNode } from 'react';
import { isNil } from 'lodash';
import { ExtractedProp } from '../../../lib2/extractDocgenProps';
import { PropTypesType } from './types';
import { createPropText } from '../../../lib2/createComponents';
import { InspectionType, inspectValue } from './inspectValue';

const MAX_DEFAULT_VALUE_LENGTH = 50;

interface EvaluationResult {
  succeeded: boolean;
  object?: any;
}

function evaluate(value: string): EvaluationResult {
  try {
    // Trying to re-build the value to provide a better formatting.
    // This is considered safe since this is the code generated by docgen that is evaluated.
    // eslint-disable-next-line no-eval
    const object = eval(`(${value})`);

    return {
      succeeded: true,
      object,
    };
  } catch (e) {
    // do nothing.
  }

  return { succeeded: false };
}

function prettifyValue(value: string, { indent = true } = {}): string {
  const { succeeded, object } = evaluate(value);

  if (succeeded) {
    // TODO: Use import objectToString from 'javascript-stringify'.
    return indent ? JSON.stringify(object, null, 2) : JSON.stringify(object);
  }

  return value;
}

function renderCustom(defaultValue: string): ReactNode {
  const { inferedType } = inspectValue(defaultValue);

  switch (inferedType) {
    case InspectionType.OBJECT:
      return renderObject(defaultValue);
    default:
      return defaultValue.length <= MAX_DEFAULT_VALUE_LENGTH
        ? createPropText(defaultValue)
        : createPropText('custom', { title: defaultValue });
  }
}

function renderObject(defaultValue: string): ReactNode {
  if (defaultValue.length <= MAX_DEFAULT_VALUE_LENGTH) {
    return createPropText(prettifyValue(defaultValue, { indent: false }));
  }

  return createPropText('Object', { title: prettifyValue(defaultValue) });
}

function renderFunc(defaultValue: string): ReactNode {
  const { succeeded, object } = evaluate(defaultValue);

  if (succeeded) {
    const { name } = object;

    if (!isNil(name)) {
      if (name !== 'anonymous' && name !== '') {
        return createPropText(name, { title: defaultValue });
      }
    }
  }

  return defaultValue.length <= MAX_DEFAULT_VALUE_LENGTH
    ? createPropText(defaultValue)
    : createPropText('Function', { title: defaultValue });
}

export function renderDefaultValue({ docgenInfo }: ExtractedProp): ReactNode {
  const { type, defaultValue } = docgenInfo;

  if (!isNil(defaultValue)) {
    // TODO: Need a .toString() ?
    const { value } = defaultValue;

    switch (type.name) {
      case PropTypesType.CUSTOM:
        return renderCustom(value);
      case PropTypesType.SHAPE:
      case PropTypesType.OBJECT:
        return renderObject(value);
      case PropTypesType.FUNC:
        return renderFunc(value);
      default:
        return null;
    }
  }

  return null;
}
